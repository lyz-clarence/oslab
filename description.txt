


Description

+------------------+  <- 0xFFFFFFFF (4GB)
|     32-bit	   |
| memory mapped    |
|     devices      |
|		   |
/\/\/\/\/\/\/\/\/\/\

/\/\/\/\/\/\/\/\/\/\
|		   |
|      Unused	   |
|		   |
+------------------+  <- depends on amount of RAM
|		   |
|		   |
| Extended Memory  |
|		   |
|		   |
+------------------+  <- 0x00100000 (1MB)
|     BIOS ROM	   |
+------------------+  <- 0x000F0000 (960KB)
| 16-bit devices,  |
| expansion ROMs   |
+------------------+  <- 0x000C0000 (768KB)
|   VGA Display    |
+------------------+  <- 0x000A0000 (640KB)
| 		   |
|    Low Memory    |
|		   |
+------------------+  <- 0x00000000

BIOS
首先cpu运行的第一条指令地址位于0xffff0(位于BIOS中)（我理解为BIOS在CPU通电后被自动加载到BIOS ROM中，另外寄存器初始化时，段寻值的寄存器CS为0xffff, 所以第一条指令位于0xffff0）
由于从0xffff0到0x100000没有空间可以用来放指令，因此，这第一条指令是ljmp, 在本次lab中ljmp会跳到0xfe05b。开始BIOS应该做的事情： 初始化寄存器（其中第一步是初始化cr0寄存器，大约是为了切换成实模式吧），在初始化寄存器做完之后，它会寻找bootable的ide，从其（第一个）扇区中把（512B的）boot loader加载到内存中0x7c00的位置，然后再跳转到这里，至此控制权交到了boot loader手中

bootloader
boot loader会先做一些简单的处理，设置一些寄存器什么的， 然后大约在0x7c2a的位置，设置cr0，从实模式跳转到保护模式， 之后 开始把硬盘里的kernel加载进来，加载到0x100000（第一条指令是0x10000c这里）的位置。然后跳转到这里，交出控制权给kernel。
注：boot loader加载kernel的过程： 在变成保护模式后，boot loader会调用自己的函数bootmain来load kernel，它会读kernel header，可以得到一些有关link和load的相关信息(kernel的link addr是0xf010000c, load addr是0x10000c)。从而判断应该把Kernel load到哪里，以及要读多少个扇区。

kernel
kernel得到了控制权，置PG位（这之后可以自动将link addr翻译成load addr了）， 初始化栈。然后kernel想怎么干就怎么干。。。。


difficulties:

有很多遇到的困难怎么解决的已经写在answer.txt里了。
1.印象最深刻的是最后一道题目， 因为不知道va_arg具体怎么定义的，想将加法改成减法只能嘴上说说，并不知道该改哪里，所以在答案里写了一个替代方案，但是这个方案太麻烦了。。
通过网上查找其实可以发现
#defineva_arg(ap,type)\
	*(type*)((ap)+=__va_size(type),(ap)-__va_size(type)
#defineva_start(ap,last)\
	((ap)=(va_list)&(last)+__va_size(last))
以上是原本的
那么就应该里面的加号改为减号，减号改成加号
2.关于某些Exercise
  虽然不是难点，但是在此记录:
	有关查看特定位置内存的Exercise，一般都是在未load进来时看一次，该处为空（不是真正意义上的空，而是一直是处于初始化时的状态），在Load之后再查看，仅能查看到指令了。
	Exercise 5：
		如果将link addr改成0x7c00以外的值， 那么会发生的情况是，load addr依然不变，所以一般不会有问题，但是如果遇到了jmp，jmp到的地址在指令里是link的地址，而link的地址不能被正确翻译成load的地址，所以会在此处报错（本Lab是在刚刚切换成保护模式时紧接着的ljmp处报错）。 同理还有Exercise7, 这个是因为没有开启PG，从而无法完成对应的转换。
	Exercise 10:
		每次调用backtrace， 会先Push ebp. ebx， 前者是为了保存栈帧，后者是为了保存callee save的寄存器。然后esp+=0x14,增加了20Byte,大概是一部分用作传参 最后call的时候要push eip, 所以一个push了 4+4+20+4 = 32Byte的东西。
	
