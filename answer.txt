
Questions after Exercise 3

1.  At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?
    
    0x7c2d  
	ljmp    $PROT_MODE_CSEG, $protcseg
    跳转到0x7c32处， 从该处开始执行32-bit代码
	
    
    0x7c23:	mov    %cr0,%eax
    0x7c26:	or     $0x1,%ax 
    0x7c2a:	mov    %eax,%cr0

    将cr0的PE位置1， 从16位实地址模式切换成32位的保护模式
    在修改该了PE位之后程序必须立刻使用一条跳转指令，以刷新处理器执行管道中已经获取的不同模式下的任何指令，所以接下来是一个ljmp

注：
	0x7c1e:	  lgdtw 0x7c64
	这条指令将地址(0x7c64)指向的内容给gdtr，而该地址里的内容为
	.word 0x17	#sizeof(gdt)-1
	.long gdt	#address gdt
	用于查找gdt，（gdtr是用来查找gdt的寄存器）
	而在gdt中，我能理解的是至少有两个segement的descriptor, code seg 和 data seg, 在之前提到的ljmp中， PROT_MODE_CSEG值为0x8，即第4个bit为1，
	从而是选择code seg的descriptor中所记录的基地址，而这个地址貌似被设置成了0x0，所以ljmp才可以直接跳到值本身为实地址的虚地址上去。

2.  What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?

	最后一条指令应该是进入load进来的elf:
	0x7d63:		call *0x10018
	即	((void (*)(void)) (ELFHDR->e_entry))();

	kernel的第一条指令则为
	0x10000c:    movw   $0x1234,0x472

3.  Where is the first instruction of the kernel?
	
	0x10000c

注：	而此时可以查看kernel.asm， 发现
	f010000c <entry>:
	f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
	f010000c与10000c并不同
	通过指令objdump -t kernel
	发现
	f010000c g	.text   00000000 entry
	通过指令objdump -h kernel
	发现
	Idx	Name	VMA		LMA
	0	.text	f0100000	00100000
	大约就是f0100000是虚拟地址，对应线性地址00100000，所以并无矛盾	
	另外，通过前文内容
	K> kerninfo
	Special kernel symbols:
	entry f010000c (virt)	0010000c (phys)
	也可以说明这一点

4.  How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?
	通过读bootmain的代码可知， 首先要read 1st page off disk， 来初始化ELFHDR， 而所需要的信息就存在这里。
	由ELFHDR的命名可以大致猜测应为elf header,那么通过指令objdump -p kernel查看header得到
	程序头：
    	LOAD off    0x00001000 vaddr 0xf0100000 paddr 0x00100000 align 2**12
         	filesz 0x00007323 memsz 0x00007323 flags r-x
    	LOAD off    0x00009000 vaddr 0xf0108000 paddr 0x00108000 align 2**12
         	filesz 0x0000a300 memsz 0x0000a944 flags rw-
   	STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         	filesz 0x00000000 memsz 0x00000000 flags rwx
	大概需要的信息就存在这里.


Questions ater Exercise 8

1. Explain the interface between printf.c and console.c . Specifically, what function does console.c export? How is this function used by printf.c ?

	kern/console.c 提供给printf.c的interface:

void
cputchar(int c)
{
	cons_putc(c);
}

	console.c 主要是负责实现I/O的功能，即与硬件交互。 printf.c通过调用其中的函数cputchar来打印一个字符。
	


2. Explain the following from console.c :

1	if (crt_pos >= CRT_SIZE) {
2		int i;
3		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
4		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
5			crt_buf[i] = 0x0700 | ' ';
6		crt_pos -= CRT_COLS;
7	}


	当屏幕写满之后，将从第二行开始(即crt_buf + CRT_COLS)到最后一行（即(CRT_SIZE - CRT_COLS) * sizeof(uint16_t)大小的内容）移动到从第一行开头(即位置crt_buf)开始（到倒数第二行结束） //1-3行
	最后一行再全都设置成空格     //4-5行
	光标置于行首		    //6行
	总结起来: 如果屏幕写满向上滚动一行



3. For the following questions you might wish to consult the notes for Lecture 2. These notes cover GCC's calling convention on the x86.
   Trace the execution of the following code step-by-step:
	int x = 1, y = 3, z = 4;
	cprintf("x %d, y %x, z %d\n", x, y, z);
   o In the call to cprintf() , to what does fmt point? To what does ap point?
   o List (in order of execution) each call to cons_putc , va_arg , and vcprintf . For cons_putc , list its argument as well. For va_arg , list what ap points to before and after the call. 
     For vcprintf list the values of its two arguments.


	fmt指向输入的字符串，例子中即指向"x %d, y %x, z %d\n"， 
	ap指向不定参数表第一个参数的地址，即x的地址。
	cprintf("x %d, y %x, z %d\n", x, y, z);
	vcprintf(fmt, ap);   				//fmt: "x %d, y %x, z %d\n"的地址， ap: &x;
	vcprintfmt((void*)putch, &cnt, fmt, ap);
	在vcprintfmt调用了va_arg, putch(putch调用了，cputchar(), cputchar调用了cons_putc)
	va_arg(va_list arg_ptr, type): (在这里arg_ptr是ap), 返回当前指向的type类型的变量，并将ap指向向后移动type大小的地址，即获得下一个参数的地址。即第一次调用，va_arg(ap, int);会将返回int类型的x，并将ap指向y。
	大约会调用14次cputchar, 参数分别是以下字符对应的int值（大约是ASCII）
	"x"   " "   "1"   ","   " "   "y"   " "   "3"   ","   " "   "z"   " "   "4"   "\n"   

4. Run the following code.
	unsigned int i = 0x00646c72;
	cprintf("H%x Wo%s", 57616, &i);
   What is the output? Explain how this output is arrived at in the step-by-step manner of the previous exercise. Here's an ASCII table that maps bytes to characters.
   The output depends on that fact that the x86 is little-endian. If the x86 were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
   Here's a description of little- and big-endian and a more whimsical description.


	打印He110 Wold
	首先打印“H”， 然后将57616以16进制打印，即“e110”, 然后打印“ Wo”, 再将指向i的指针作为指向字符串的指针，打印出字符串，即将i的值变成字符串打印出来。
	下面地址从下往上由低到高, 小端法(低位在低地址)i在内存中的结构为：
			00	//NULL
			64	//d
			6c	//l
			72	//r
	打印时从低地址开始打印，所以会打印“rld”
	当使用大端法时则 i = 0x726c6400
	而57616不需要（因为这个换算和存储没有关系）

5. In the following code, what is going to be printed after 'y=' ? (note: the answer is not a specific value.) Why does this happen?
	cprintf("x=%d y=%d", 3);

	在cprintf中ap指向3的地址， 当遇到第一个%d，打印出3然后ap += sizeof(int); 即ap指向内存中3之后的地址， 然后再遇到一个%d时， 则会打印出此时ap指向的内容（int大小）还算成10进制， 而这个地址的内容我们并不知道是什么。

6. Let's say that GCC changed its calling convention so that it pushed arguments on the stack in declaration order, so that the last argument is pushed last. How would you have to change cprintf or its interface so that it would still be possible to pass it a variable number of arguments?
	
	之前是先声明的后push，因为栈由高向低增长，那么后push的在高地址， 如果说默认是先声明的后Push，则后声明参数相对于前一个声明的参数在高地址上。这也符合我在前一题说的每次ap是自增得到下一个参数的地址。 如果是这样的话， gcc更改了push的顺序， 那么va_arg这个函数应在每次调用时把指针值的增加改为减少。 
	但是va_arg(ap, type)的定义为：
	#define va_arg(ap, type) __builtin_va_arg(ap, type)
而__builtin_va_arg(ap, type)大概是写死在库里了。。原本改va_arg 和 va_start，将里面计算地址的加法改成减法就好了。。。
那么现在只能这样做，
由于gcc是先push fmt, 那么必然必须要事前要知道fmt的具体位值（此时栈顶应当也是可知的），或是知道push了多少个值，否则是找不到fmt的。 这样的话， 我们可以先把所有刚刚Pushj进去的都pop出来，然后再按反方向push进去，或者直接存在args[]这样的数组中
















			 




	

